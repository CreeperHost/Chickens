buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = "${project.mc_version}-${project.mod_version}"
group = "${project.maven_group}"
archivesBaseName = "${project.mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: '1.19'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                chickens {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                chickens {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'chickens', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                chickens {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name 'JEI'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven {
        name "CreeperHost"
        url 'https://maven.creeperhost.net'
    }
    maven {
        name "Architectury"
        url "https://maven.architectury.dev/"
    }
    maven { url "https://maven.shedaniel.me" }
    flatDir {
        dirs '/libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
//    theoneprobe-1.18-5.1.0.jar
//    implementation fg.deobf("theoneprobe:theoneprobe:1.18-5.1.0")

    compileOnly fg.deobf("mezz.jei:jei-1.19-common-api:${project.jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-1.19-forge-api:${project.jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-1.19-forge:${project.jei_version}")

//    implementation fg.deobf("mcjty.theoneprobe:TheOneProbe-${project.mc_version}:${project.mc_version}-${probe_version}")
//    implementation "dev.architectury:architectury:${rootProject.architectury_version}"

//    implementation(fg.deobf("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"))

//    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}")

    implementation fg.deobf("dev.architectury:architectury-forge:${rootProject.architectury_version}")
    implementation fg.deobf("net.creeperhost:polylib-forge:${rootProject.polylib_version}")

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = [
            '-Xlint:deprecation', // deprecation, rawtypes, cast, unchecked, all
            '-Xlint:unchecked',
    ]
}

jar {
    manifest {
        attributes(["Specification-Title": archivesBaseName,
                    "Specification-Vendor": "gigabit101",
                    "Specification-Version": "${project.mod_version}",
                    "Implementation-Title": archivesBaseName,
                    "Implementation-Version": "${project.mod_version}",
                    "Implementation-Vendor" :"gigabit101",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}